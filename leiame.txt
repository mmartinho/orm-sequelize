******************************************************** 
AVA: cursos.alura.com.br
Formação: Node.js com Express
Curso: NodeJS: ORM com NodeJS: API com Sequelize e MySQL
Data Início: 16/03/2021
********************************************************

Capítulo 01: Estruturando o projeto
#sequelize, #sequelize-cli, #sequelizeProjectInit, #sequelizerc

1. Criamos um novo diretório: orm-Sequelize;
2. Inicializamos e instalamos algumas dependencias:
        >npm init -y
        >npm install express
        >npm install body-parser
        >npm install nodemon --save-dev
        >npm install mysql2
        >npm install sequelize sequelize-cli path
3. Criamos o fonte inicial da aplicação:
        @see api\index.js
4. Copiamos o .gitignore do projeto anterior;
5. Criamos o repositório inicial da aplicação, sincronizando com o github;
6. Executamos a criação do projeto inicial:
        >npx sequelize-cli init
7. Movemos os arquivos gerados pelo cli para o diretório api;
8. Para que esse novo diretório seja visto pelo Sequelize, precisamos do:
        @see .sequelizerc
9. Criamos um usuário chamado "orm.sequelize" com privilegios para o db MySQL8 em localhost "orm_sequelize";
10. Atualizamos o:
        @see api\config\config.json
    ...com as informações do banco de desenvolvimento

Capítulo 02: Modelos, migrações e seeds
#migrations, #seeds

1. Criamos o modelo "Pessoas" com o comando:
        >npx sequelize-cli model:create --name Pessoas --attributes nome:string,ativo:boolean,email:string,role:string
   Sequelize-cli criou:
        @see api\models\pessoas.js
        @see api\migrations\20210318194015-create-pessoas.js
   ...respectivamente a classe ORM "Pessoas" e sua correspondente DCL para o BD
2. Executamos as migrations:
        >npx sequelize-cli db:migrate
   OBS: para desfazer a ultima migração aplicada:
        >npx sequelize-cli db:migrate:undo
   OU: para desfazer uma migração específica:
        >npx sequelize-cli db:migrate:undo --name [data-hora]-create-[nome-da-tabela].js
3. Para povoar nossa tabela de pessoas, criamos uma nova seed com o comando:
        >npx sequelize-cli seed:create --name demo-pessoa
4. Adicionamos alguns dados fictícios em:
        @see api\seeders\20210318211019-demo-pessoa.js
   ...e executamos o comando:
        >npx sequelize-cli db:seed:all
   OBS: para desfazer o último seed:
        >npx sequelize-cli db:seed:undo
   OU: para desfazer um seed específico:
        >npx sequelize-cli db:seed:undo  --seed nome-do-arquivo
   OU: todos:
        >npx sequelize-cli db:seed:undo:all

Capítulo 03: Controladores e rotas
#mvc, #routes, #controllers

1. Começamos a organizar o codigo da API, separando em pastas: controllers e routes, seguindo o padrão MVC proposto pelo
   sequelize-cli;
2. Os "index.js" fazem o papel de gerenciadores de conteúdo de pastas. Quando é realizado o "require" de uma pasta, e 
   esta pasta tem o index.js, o ambiente entende que queremos todo o conteúdo exportado por index.js:
        @see api\routes\index.js
        @see api\index.js
3. Criamos o controlador de Pessoas:
        @see api\controllers\PessoaController.js
4. Criamos a rota de pessoas:
        @see api\routes\pessoasRoute.js
   ...importando nela o controlador PessoaController e
   ...importando-a no:
        @see api\routes\index.js

Capítulo 04: CRUD com Sequelize

1. Acrescentamos uma rota para visualizar uma pessoa em:
        @see api\routes\pessoasRoute.js
   ...e mais um método no controlador de pessoas para consultar uma pessoa:
        @see api\controllers\PessoaController.js
2. Acrescentamos uma rota para atualizar uma pessoa em:
        @see api\routes\pessoasRoute.js
   ...e mais um método no controlador de pessoas para atualizar dados de uma pessoa:
        @see api\controllers\PessoaController.js
3. Acrescentamos uma rota para excluir uma pessoa em:
        @see api\routes\pessoasRoute.js
   ...e mais um método no controlador de pessoas para excluir uma pessoa:
        @see api\controllers\PessoaController.js

Capítulo 05: Relações e associações
#hasMany, #belongsTo

1. Criamos um novo modelo para representar a tabela "Nivel":
        >npx sequelize-cli model:create --name Niveis --attributes descr_nivel:string
2. Criamos um novo modelo para representar a tabela "Turma" :
        >npx sequelize-cli model:create --name Turmas --attributes data_inicio:dateonly
3. Criamos um novo modelo para representar a tabela "Matricula":
        >npx sequelize-cli model:create --name Matriculas --attributes status:string
4. OBSERVE a ORDEM que foram criadas, pois, é a mesma ordem que as migrações serão executadas;
5. Modificamos os modelos:
        @see api\models\matriculas.js
        @see api\models\niveis.js
        @see api\models\pessoas.js
        @see api\models\turmas.js
   ... para conter as relações de "HasMany" e "BelongsTo"
6. Modificamos as migrações:
        @see api\migrations\20210322143156-create-turmas.js
        @see api\migrations\20210322143322-create-matriculas.js
   ...para conter as chaves estrangeiras
7. Executamos as migrações:
        >npx sequelize-cli db:migrate
8. Criamos os seeders (nesta ordem):
        >npx sequelize-cli seed:create --name demo-nivel
        >npx sequelize-cli seed:create --name demo-turmas
        >npx sequelize-cli seed:create --name demo-matriculas
   Executando-os:
        >npx sequelize-cli db:seed:all

Capítulo 06: Controladores

1. Criamos 2 novos controladores:
        @see api\controllers\NivelController.js
        @see api\controllers\TurmaController.js
2. Criamos 2 novas rotas:
        @see api\routes\niveisRoute.js
        @see api\routes\turmasRoute.js
3. Declaramos as novas rotas em:
        @see api\routes\index.js
4. Nas rotas de pessoa criamos mais 4 rotas para manipular a sua Matrícula:
        @see api\routes\pessoasRoute.js
5. Criamos mais 4 métodos no controlador de Pessoa:
        @see api\controllers\PessoaController.js